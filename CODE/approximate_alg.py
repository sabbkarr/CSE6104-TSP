# -*- coding: utf-8 -*-
"""CSE6140_Final_Project_Approximate_Alg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U-h0MlTBH209neJ_-IUi9Tbu0GaEc7Lr
"""

from tsp_utils import read_tsp_file, total_distance, euclidean_distance
import math
import networkx as nx
from heapq import heappop, heappush

def mst_tsp_approximation(coords):
    # Initialization
    nodes = list(coords.keys())
    visited = set()
    mst_edges = []
    total_cost = 0
    min_heap = []

    # Start with the first node
    start_node = nodes[0]
    visited.add(start_node)

    # Add all edges from the start node to the priority queue
    for other_node in nodes:
        if other_node != start_node:
            dist = euclidean_distance(coords[start_node], coords[other_node])
            heappush(min_heap, (dist, start_node, other_node))

    # Build the MST
    while len(visited) < len(nodes):
        # Pop the smallest edge from the priority queue
        weight, node1, node2 = heappop(min_heap)

        if node2 in visited:
            continue

        # Add this edge to the MST
        mst_edges.append((node1, node2))
        total_cost += weight
        visited.add(node2)

        # Add all edges from the new node to unvisited nodes
        for other_node in nodes:
            if other_node not in visited:
                dist = euclidean_distance(coords[node2], coords[other_node])
                heappush(min_heap, (dist, node2, other_node))

    return mst_edges, total_cost